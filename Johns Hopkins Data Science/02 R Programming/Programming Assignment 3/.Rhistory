plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, title="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10, 15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mtcars, mpg~cyl)
boxplot(mpg~cyl, mtcars)
hist(mtcars$mpg)
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
rm(x, g)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x, h)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
rm(j, k)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
myVector <- makeVector(1:15)
View(myVector)
myVector
aResult <- cachemean(1:15)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
aResult <- cachemean(1:15)
makeVector <- function(x = numeric()) {
m <- NULL
# important: mutator method: getter(access data), setter(mutate data)
set <- function(y) {
x <<- y #reset x and the assignment should be made to the parent environment
m <<- NULL #clear any values from previous execution of cachemean()
}
# Reset the values if the value of x changes, the same useage as the first two lines (x=numeric() and m=NULL)
get <- function() x #retrieves x from parent environment of makeVector()
setmean <- function(mean) { m <<- mean } #{} can be ignored
getmean <- function() m #retrieve its value from parent environment
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
#elementName = value, allow us to use $ form of the extract operator to access the functions by name
# gives the name 'set' to the set() function defined above
# gives the name 'get' to the get() function defined above
# gives the name 'setmean' to the setmean() function defined above
# gives the name 'getmean' to the getmean() function defined above
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
myVector <- makeVector(1:15)
aResult <- cachemean(1:15)
# Programming Assignment 2 Lexical Scoping
# Create a special object that stores a matrix and caches its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set=set, get=get, setsolve=setsolve, getsolve=getsolve)
}
# cache the inverse value
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
# Demo
makeCacheMatrix(x= matrix(c(1,2,3,4), nrow=2, ncol=2))
# Demo
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1
I2 <- matrix(c(1,0,0,1), nrow = 2, ncol = 2)
I2
n1 <- matrix(c(6,2,8,4), nrow = 2, ncol = 2)
n1
m1 %*% n1
n1 %*% m1
solve(m1)
solve(n1)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
myMatrix_object$set(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
setwd("C:/Users/ychang/Desktop/Other/Johns Hopkins Data Science/R Programming/Week 4")
outcome <- read.csv("outcome-of-care-measures.csv", head=T, colClasses="character")
head(outcome)
View(outcome)
ncol(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
bestout <- outcome[,c(2,7,11,17,23)]
View(bestout)
View(bestout)
outcome[, c(11,17,23)] <- as.numeric(outcome[, c(11,17,23)])
outcome[, c(11,17,23)] <- as.numeric(outcome[, c(11,17,23)])
test <- lapply(outcome[, c(11,17,23)], as.numeric(outcome[, c(11,17,23)]))
# convert to numeric values for comparing outcome
cols <- c(17,23)
outcome[, cols] <- apply(outcome[, cols], 2, function(x) as.numeric(as.character(x)))
View(outcome)
bestout <- outcome[, c(2,7,11,17,23)]
View(bestout)
View(bestout)
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome
cols <- c(17,23)
outcome[, cols] <- apply(outcome[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcome[, c(2,7,11,17,23)]
## Check that state and outcome are valid
if(state != bestout[, 2]){
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death rate
}
best("XX")
# 2. Finding the best hospital in a state
# convert to numeric values for comparing outcome
cols <- c(17,23)
outcome[, cols] <- apply(outcome[, cols], 2, function(x) as.numeric(as.character(x)))
best <- function(state, outcome){
## Read outcome data
bestout <- outcome[, c(2,7,11,17,23)]
## Check that state and outcome are valid
if(state != bestout[, 2]){
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death rate
}
best("XX")
best("BB", "heart attack")
## Read outcome data
bestout <- outcome[, c(2,7,11,17,23)]
## Check that state and outcome are valid
if(state != bestout[, 2]){
stop("invalid state")
}
if(outcome !="heart attack" | outcome !="heart failure" | outcome !="pneumonia"){
stop("invalid outome")
}
## Return hospital name in that state with lowest 30-day death rate
}
best <- function(state, outcome){
## Read outcome data
bestout <- outcome[, c(2,7,11,17,23)]
## Check that state and outcome are valid
if(state != bestout[, 2]){
stop("invalid state")
}
if(outcome !="heart attack" | outcome !="heart failure" | outcome !="pneumonia"){
stop("invalid outome")
}
## Return hospital name in that state with lowest 30-day death rate
}
best("BB", "heart attack")
View(bestout)
cols <- c(17,23)
outcome[, cols] <- apply(outcome[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcome[, c(2,7,11,17,23)]
best <- function(state, outcome){
## Read outcome data
# bestout <- outcome[, c(2,7,11,17,23)]
## Check that state and outcome are valid
if(state != bestout[, 2]){
stop("invalid state")
}
if(outcome !="heart attack" | outcome !="heart failure" | outcome !="pneumonia"){
stop("invalid outome")
}
## Return hospital name in that state with lowest 30-day death rate
}
best("BB", "heart attack")
cols <- c(17,23)
outcome[, cols] <- apply(outcome[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcome[, c(2,7,11,17,23)]
best <- function(state, outcome){
## Read outcome data
## Check that state and outcome are valid
if(state != bestout[, 2]) stop("invalid state")
if(outcome !="heart attack" | outcome !="heart failure" | outcome !="pneumonia") stop("invalid outome")
## Return hospital name in that state with lowest 30-day death rate
}
best("BB", "heart attack")
best("NY", "hert attack")
cols <- c(17,23)
outcome[, cols] <- apply(outcome[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcome[, c(2,7,11,17,23)]
best <- function(state, outcome){
## Read outcome data
## Check that state and outcome are valid
if(state != bestout$State) stop("invalid state")
if(outcome !="heart attack" | outcome !="heart failure" | outcome !="pneumonia") stop("invalid outome")
## Return hospital name in that state with lowest 30-day death rate
}
best("BB", "heart attack")
best("NY", "hert attack")
# 2. Finding the best hospital in a state
# convert to numeric values for comparing outcome
cols <- c(17,23)
outcome[, cols] <- apply(outcome[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcome[, c(2,7,11,17,23)]
best <- function(state, outcome){
## Read outcome data
## Check that state and outcome are valid
ifelse((state != bestout$State), stop("invalid state"))
ifelse((outcome !="heart attack" | outcome !="heart failure" | outcome !="pneumonia"), stop("invalid outome"))
## Return hospital name in that state with lowest 30-day death rate
}
best("BB", "heart attack")
best("NY", "hert attack")
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death rate
}
setwd("C:/Users/ychang/Desktop/Other/GitHub/Coursera/Johns Hopkins Data Science/02 R Programming/Programming Assignment 3")
outcare <- read.csv("outcome-of-care-measures.csv", head=T, colClasses="character")
head(outcare)
ncol(outcare)
names(outcare)
outcare[, 11] <- as.numeric(outcare[, 11])
hist(outcare[, 11])
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
View(bestout)
View(bestout)
# 2. Finding the best hospital in a state
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome: heart attack, heart failure, or pneumonia
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
if (outcome !="heart attack" | outcome !="heart failure" | outcome !="pneumonia") stop("invalid outcome")
## Return hospital name in that state with lowest 30-day death rate
}
best("NY", "hert attack")
View(bestout)
statedata <- bestout[, 2]
class(statedata)
statedata
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome: heart attack, heart failure, or pneumonia
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
statedata <- bestout[, 2]
if (state !=statedata) stop("invalid state")
if (outcome !="heart attack" | outcome !="heart failure" | outcome !="pneumonia") stop("invalid outcome")
## Return hospital name in that state with lowest 30-day death rate
}
best("BB", "heart attack")
statedata <- c(bestout[, 2])
statedata
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome: heart attack, heart failure, or pneumonia
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
statedata <- c(bestout[, 2])
if (state !=statedata) stop("invalid state")
if (outcome !="heart attack" | outcome !="heart failure" | outcome !="pneumonia") stop("invalid outcome")
## Return hospital name in that state with lowest 30-day death rate
}
best("BB", "heart attack")
# 2. Finding the best hospital in a state
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome: heart attack, heart failure, or pneumonia
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
if (outcome !="heart attack" | outcome !="heart failure" | outcome !="pneumonia") stop("invalid outcome")
## Return hospital name in that state with lowest 30-day death rate
}
# Demo
best("TX", "heart attack")
unique(statedata)
length(unique(statedata))
length(unique(bestout[, 2])
length(unique(bestout[, 2]))
statedata <- unique(c(bestout[, 2]))
statedata
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome: heart attack, heart failure, or pneumonia
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
statedata <- unique(c(bestout[, 2]))
for(i in 1:length(statedata)){
if(state != statedata[i]) stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death rate
}
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome: heart attack, heart failure, or pneumonia
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
statedata <- unique(c(bestout[, 2]))
for(i in 1:length(statedata)){
if(state != statedata[i]) stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death rate
}
best("BB", "heart attack")
# 2. Finding the best hospital in a state
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome: heart attack, heart failure, or pneumonia
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
statedata <- unique(c(bestout[, 2]))
for(i in 1:length(statedata)){
if(state != statedata[i]) stop("invalid state")
}
outcomedata <- c("heart attack", "heart failure", "pneumonia")
for(i in 1:length(outcomedata)){
if(outcome !=outcomedata[i]) stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
}
# Demo
best("TX", "heart attack")
best("TX", "heart failure")
best("BB", "heart attack")
best("NY", "hert attack")
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome: heart attack, heart failure, or pneumonia
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
statedata <- unique(c(bestout[, 2]))
for(i in 1:length(statedata)){
if(state != statedata[i]) stop("invalid state")
}
else {return(state)}
outcomedata <- c("heart attack", "heart failure", "pneumonia")
for(i in 1:length(outcomedata)){
if(outcome !=outcomedata[i]) stop("invalid outcome")
}
else {return(outcome)}
## Return hospital name in that state with lowest 30-day death rate
}
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome: heart attack, heart failure, or pneumonia
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
statedata <- unique(c(bestout[, 2]))
for(i in 1:length(statedata)){
if(state != statedata[i]) stop("invalid state")
}
else return(state)
outcomedata <- c("heart attack", "heart failure", "pneumonia")
for(i in 1:length(outcomedata)){
if(outcome !=outcomedata[i]) stop("invalid outcome")
}
else return(outcome)
## Return hospital name in that state with lowest 30-day death rate
}
# 2. Finding the best hospital in a state
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome: heart attack, heart failure, or pneumonia
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
statedata <- unique(c(bestout[, 2]))
for(i in 1:length(statedata)){
if(state != statedata[i]) stop("invalid state")
}
else {return(state)}
outcomedata <- c("heart attack", "heart failure", "pneumonia")
for(i in 1:length(outcomedata)){
if(outcome !=outcomedata[i]) stop("invalid outcome")
}
else {return(outcome)}
## Return hospital name in that state with lowest 30-day death rate
}
# 2. Finding the best hospital in a state
best <- function(state, outcome){
## Read outcome data
# convert to numeric values for comparing outcome: heart attack, heart failure, or pneumonia
cols <- c(17,23)
outcare[, cols] <- apply(outcare[, cols], 2, function(x) as.numeric(as.character(x)))
bestout <- outcare[, c(2,7,11,17,23)]
## Check that state and outcome are valid
statedata <- unique(c(bestout[, 2]))
for(i in 1:length(statedata)){
if(state != statedata[i]) stop("invalid state")
else return(state)
}
outcomedata <- c("heart attack", "heart failure", "pneumonia")
for(i in 1:length(outcomedata)){
if(outcome !=outcomedata[i]) stop("invalid outcome")
else return(outcome)
}
## Return hospital name in that state with lowest 30-day death rate
}
# Demo
best("TX", "heart attack")
best("BB", "heart attack")
best("NY", "hert attack")
best("BB", "heart attack")
statedata
outcomedata
test <-function(state){
statedata <- unique(c(bestout[, 2]))
for(i in 1:length(statedata)){
if(state != statedata[i]) stop("invalid state")
else return(state)
}
}
test("BB")
test("CA")
statedata[1]
statedata[2]
q
